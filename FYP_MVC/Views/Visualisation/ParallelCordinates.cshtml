@model FYP_MVC.Models.CoreObjects.ChartComponentViewModel

@{
    ViewBag.Title = "ParallelCordinates";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>ParallelCordinates</h2>

<script src="//d3js.org/d3.v3.min.js"></script>
<script>

    var margin = {top: 30, right: 10, bottom: 10, left: 10},
     width = 960 - margin.left - margin.right,
     height = 500 - margin.top - margin.bottom;

    var x = d3.scale.ordinal().rangePoints([0, width], 1),
        y = {},
        dragging = {};

    var line = d3.svg.line(),
        axis = d3.svg.axis().orient("left"),
        background,
        foreground;

    var svg = d3.select("body").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    drawVisualization();

    function drawVisualization() {

        var arr = [];
        var viewModel = @Html.Raw(Json.Encode(Model));
        var model=viewModel.chartComponent;
        var mapping=viewModel.mapping;
        var numOfRows=model.columnList[0].data.length;
        var numOfColumns=model.columnList.length;
        arr[0] = [];
        var headers = [];
        for (var i = 0; i < numOfColumns; i++) {
            arr[0][i] =model.columnList[i].columnHeader;
            headers[i] = model.columnList[i].columnHeader;
        };

        for(var i = 1; i <=numOfRows ; i++){
            arr[i] = [];
            for (var j = 0; j < numOfColumns; j++) {
                arr[i][j] =model.columnList[j].data[i-1].value ;
            }
        };
        //dataset for parallel cordinates
        
        
        var cars = [];
        //var headers = ["name","economy","cylinders","displacement","power","weight"];

        for(var i = 1; i <= numOfRows; i++){
            var obj = {};
            for (var j = 0; j < mapping.length; j++) {
                
                obj[headers[j]] = arr[i][mapping[j]-1];     
            }
            cars.push(obj);
        }
      
       
       
        x.domain(dimensions = d3.keys(cars[0]).filter(function (d) {
            return d != headers[0] && (y[d] = d3.scale.linear()
                .domain(d3.extent(cars, function (p) { return +p[d]; }))
                .range([height, 0]));
        }));

        // Add grey background lines for context.
        background = svg.append("g")
            .attr("class", "background")
          .selectAll("path")
            .data(cars)
          .enter().append("path")
            .attr("d", path);

        // Add blue foreground lines for focus.
        foreground = svg.append("g")
            .attr("class", "foreground")
          .selectAll("path")
            .data(cars)
          .enter().append("path")
            .attr("d", path);

        // Add a group element for each dimension.
        var g = svg.selectAll(".dimension")
            .data(dimensions)
          .enter().append("g")
            .attr("class", "dimension")
            .attr("transform", function (d) { return "translate(" + x(d) + ")"; })
            .call(d3.behavior.drag()
              .origin(function (d) { return { x: x(d) }; })
              .on("dragstart", function (d) {
                  dragging[d] = x(d);
                  background.attr("visibility", "hidden");
              })
              .on("drag", function (d) {
                  dragging[d] = Math.min(width, Math.max(0, d3.event.x));
                  foreground.attr("d", path);
                  dimensions.sort(function (a, b) { return position(a) - position(b); });
                  x.domain(dimensions);
                  g.attr("transform", function (d) { return "translate(" + position(d) + ")"; })
              })
              .on("dragend", function (d) {
                  delete dragging[d];
                  transition(d3.select(this)).attr("transform", "translate(" + x(d) + ")");
                  transition(foreground).attr("d", path);
                  background
                      .attr("d", path)
                    .transition()
                      .delay(500)
                      .duration(0)
                      .attr("visibility", null);
              }));

        // Add an axis and title.
        g.append("g")
            .attr("class", "axis")
            .each(function (d) { d3.select(this).call(axis.scale(y[d])); })
          .append("text")
            .style("text-anchor", "middle")
            .attr("y", -9)
            .text(function (d) { return d; });

        // Add and store a brush for each axis.
        g.append("g")
            .attr("class", "brush")
            .each(function (d) {
                d3.select(this).call(y[d].brush = d3.svg.brush().y(y[d]).on("brushstart", brushstart).on("brush", brush));
            })
          .selectAll("rect")
            .attr("x", -8)
            .attr("width", 16);
    }


    /////////////////////////

    function position(d) {
        var v = dragging[d];
        return v == null ? x(d) : v;
    }

    function transition(g) {
        return g.transition().duration(500);
    }

    // Returns the path for a given data point.
    function path(d) {
        return line(dimensions.map(function (p) { return [position(p), y[p](d[p])]; }));
    }

    function brushstart() {
        d3.event.sourceEvent.stopPropagation();
    }

    // Handles a brush event, toggling the display of foreground lines.
    function brush() {
        var actives = dimensions.filter(function (p) { return !y[p].brush.empty(); }),
            extents = actives.map(function (p) { return y[p].brush.extent(); });
        foreground.style("display", function (d) {
            return actives.every(function (p, i) {
                return extents[i][0] <= d[p] && d[p] <= extents[i][1];
            }) ? null : "none";
        });
    }



    /////////////////////////

    function position(d) {
        var v = dragging[d];
        return v == null ? x(d) : v;
    }

    function transition(g) {
        return g.transition().duration(500);
    }

    // Returns the path for a given data point.
    function path(d) {
        return line(dimensions.map(function(p) { return [position(p), y[p](d[p])]; }));
    }

    function brushstart() {
        d3.event.sourceEvent.stopPropagation();
    }

    // Handles a brush event, toggling the display of foreground lines.
    function brush() {
        var actives = dimensions.filter(function(p) { return !y[p].brush.empty(); }),
            extents = actives.map(function(p) { return y[p].brush.extent(); });
        foreground.style("display", function(d) {
            return actives.every(function(p, i) {
                return extents[i][0] <= d[p] && d[p] <= extents[i][1];
            }) ? null : "none";
        });
    }
    

</script>

<div id="chart" style="width: 100%; height: 500px;"> </div>

      </br>
<div class="container">

    <ul class="nav nav-tabs">
        <li class="active"><a data-toggle="tab" href="#home"><h4>Chart</h4></a></li>
        <li><a data-toggle="tab" href="#menu1"><h4>X-Axis</h4></a></li>
        <li><a data-toggle="tab" href="#menu2"><h4>Y-Axis</h4></a></li>
    </ul>

    <div class="tab-content">
        <div id="home" class="tab-pane fade in active">
            <h5><strong>Title</strong></h5>
            <div class="row">
                <div class="col-lg-4">
                    <div class="input-group">
                        <input id="title" class="form-control" placeholder="Title" aria-label="Text input with multiple buttons">
                        <div class="input-group-btn">
                            <button type="button" class="btn btn-default" aria-label="Bold"><span class="glyphicon glyphicon-bold"></span></button>
                            <button type="button" class="btn btn-default" aria-label="Italic"><span class="glyphicon glyphicon-italic"></span></button>
                        </div>
                    </div>
                </div>
            </div>

            <h5><strong>Legend</strong></h5>
            <div class="row">
                <div class="col-xs-3">
                    <div class="form-group">
                        <select id="legend" class="selectpicker form-control">
                            <option value="Left">Left</option>
                            <option value="right">Right</option>
                            <option value="top">Top</option>
                            <option value="bottom">Bottom</option>
                            <option value="none">None</option>
                        </select>
                    </div>
                </div>
            </div>

            <h5><strong>Font</strong></h5>
            <div class="row">
                <div class="col-xs-3">
                    <div class="form-group">
                        <select id="titleFont" class="selectpicker form-control">
                            <option>Arial</option>
                            <option>Sans Serif</option>
                            <option>Tahoma</option>
                            <option>Georgia</option>
                            <option>Verdana</option>
                        </select>
                    </div>
                </div>
            </div>

            <h5><strong>Font Size</strong></h5>
            <div class="row">
                <div class="col-xs-1">
                    <div class="form-group">
                        <select id="titleFontSize" class="selectpicker form-control">
                            <option>12</option>
                            <option>14</option>
                            <option>16</option>
                            <option>18</option>
                            <option>24</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <!--X-Axis -->

        <div id="menu1" class="tab-pane fade">
            <h5><strong>Lable</strong></h5>
            <div class="row">
                <div class="col-lg-4">
                    <div class="input-group">
                        <input id="xLable" class="form-control" placeholder="Title" aria-label="Text input with multiple buttons">
                        <div class="input-group-btn">
                            <button id="xBold" type="button" class="btn btn-default" aria-label="Bold"><span class="glyphicon glyphicon-bold"></span></button>
                            <button id="xItalic" type="button" class="btn btn-default" aria-label="Italic"><span class="glyphicon glyphicon-italic"></span></button>
                        </div>
                    </div>
                </div>
            </div>


            <h5><strong>GridLine</strong></h5>
            <div class="row">
                <div class="col-xs-1">
                    <div class="form-group">
                        <select id="xGrid" class="selectpicker form-control">
                            <option>5</option>
                            <option>10</option>
                            <option>15</option>
                            <option>20</option>
                            <option>25</option>
                        </select>
                    </div>
                </div>
            </div>

            <!--Y-Axis -->
        </div>
        <div id="menu2" class="tab-pane fade">
            <h5><strong>Lable</strong></h5>
            <div class="row">
                <div class="col-lg-4">
                    <div class="input-group">
                        <input id="yLable" class="form-control" placeholder="Title" aria-label="Text input with multiple buttons">
                        <div class="input-group-btn">
                            <button id="yBold" type="button" class="btn btn-default" aria-label="Bold"><span class="glyphicon glyphicon-bold"></span></button>
                            <button id="yItalic" type="button" class="btn btn-default" aria-label="Italic"><span class="glyphicon glyphicon-italic"></span></button>
                        </div>
                    </div>
                </div>
            </div>


            <h5><strong>GridLine</strong></h5>
            <div class="row">
                <div class="col-xs-1">
                    <div class="form-group">
                        <select id="yGrid" class="selectpicker form-control">
                            <option>5</option>
                            <option>10</option>
                            <option>15</option>
                            <option>20</option>
                            <option>25</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>